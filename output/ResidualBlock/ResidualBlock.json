{
    "structure": [
        {
            "type": "Conv2d",
            "params": {
                "training": "False",
                "in_channels": "8",
                "out_channels": "8",
                "transposed": "False",
                "groups": "1",
                "padding_mode": "zeros"
            },
            "has_weight": true,
            "has_bias": true,
            "source": "class Conv2d(_ConvNd):\n    __doc__ = (\n        r\"\"\"Applies a 2D convolution over an input signal com...",
            "name": "conv1"
        },
        {
            "type": "BatchNorm2d",
            "params": {
                "training": "False",
                "num_features": "8",
                "eps": "1e-05",
                "momentum": "0.1",
                "affine": "True",
                "track_running_stats": "True"
            },
            "has_weight": true,
            "has_bias": true,
            "source": "class BatchNorm2d(_BatchNorm):\n    r\"\"\"Applies Batch Normalization over a 4D input.\n\n    4D is a min...",
            "name": "bn1"
        },
        {
            "type": "Conv2d",
            "params": {
                "training": "False",
                "in_channels": "8",
                "out_channels": "8",
                "transposed": "False",
                "groups": "1",
                "padding_mode": "zeros"
            },
            "has_weight": true,
            "has_bias": true,
            "source": "class Conv2d(_ConvNd):\n    __doc__ = (\n        r\"\"\"Applies a 2D convolution over an input signal com...",
            "name": "conv2"
        },
        {
            "type": "BatchNorm2d",
            "params": {
                "training": "False",
                "num_features": "8",
                "eps": "1e-05",
                "momentum": "0.1",
                "affine": "True",
                "track_running_stats": "True"
            },
            "has_weight": true,
            "has_bias": true,
            "source": "class BatchNorm2d(_BatchNorm):\n    r\"\"\"Applies Batch Normalization over a 4D input.\n\n    4D is a min...",
            "name": "bn2"
        },
        {
            "type": "ReLU",
            "params": {
                "training": "False",
                "inplace": "False"
            },
            "has_weight": false,
            "has_bias": false,
            "source": "class ReLU(Module):\n    r\"\"\"Applies the rectified linear unit function element-wise.\n\n    :math:`\\te...",
            "name": "relu"
        }
    ],
    "connections": [
        {
            "source": "relu",
            "target": "output",
            "type": "output"
        },
        {
            "source": "<built-in function add>",
            "target": "relu",
            "type": "normal"
        },
        {
            "source": "x_1",
            "target": "relu",
            "type": "skip"
        },
        {
            "source": "x_1",
            "target": "<built-in function add>",
            "type": "normal"
        },
        {
            "source": "x_1",
            "target": "conv1",
            "type": "normal"
        },
        {
            "source": "conv1",
            "target": "bn1",
            "type": "normal"
        },
        {
            "source": "bn1",
            "target": "relu",
            "type": "normal"
        },
        {
            "source": "conv2",
            "target": "bn2",
            "type": "normal"
        },
        {
            "source": "bn2",
            "target": "relu",
            "type": "skip"
        },
        {
            "source": "bn2",
            "target": "<built-in function add>",
            "type": "normal"
        }
    ],
    "inputs": [
        "x_1"
    ]
}